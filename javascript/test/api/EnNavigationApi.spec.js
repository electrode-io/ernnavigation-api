/*
 * Electrode Native generic navigation api (V2.0)
 * Navigation helper
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * Do not edit the class manually.
 */

import EnNavigationRequests from '../../src/api/EnNavigationRequests';
import EnNavigationEvents from '../../src/api/EnNavigationEvents';

describe('EnNavigationApi', function () {
  let requests;
  let events;
  beforeEach(function () {
    let requestHandler;
    requests = new EnNavigationRequests({
      registerRequestHandler(name, handler) {
        requestHandler = handler;
      },
      sendRequest(name, data) {
        requestHandler && requestHandler(data);
        return Promise.resolve(data);
      },
    });
    let eventListener;
    events = new EnNavigationEvents({
      registerEventListener(name, listener) {
        eventListener = listener;
      },
      emitEvent(name, data) {
        eventListener && eventListener(data);
      },
    });
  });

  describe('back', () => {
    it('sends "back" request', () => {
      return requests.back('id').then(response => {
        expect(response).toEqual({data: 'id', timeout: undefined});
      });
    });
  });

  describe('finish', () => {
    it('sends "finish" request', () => {
      return requests.finish('id').then(response => {
        expect(response).toEqual({data: 'id', timeout: undefined});
      });
    });
  });

  describe('navEvent', () => {
    it('emits "navEvent" event', () => {
      const listener = jest.fn();
      events.addNavEventEventListener(listener);
      events.emitNavEvent('id');
      expect(listener).toHaveBeenCalledWith({data: 'id'});
    });
  });

  describe('navigate', () => {
    it('sends "navigate" request', () => {
      return requests.navigate('id').then(response => {
        expect(response).toEqual({data: 'id', timeout: undefined});
      });
    });
  });

  describe('onNavButtonClick', () => {
    it('emits "onNavButtonClick" event', () => {
      const listener = jest.fn();
      events.addOnNavButtonClickEventListener(listener);
      events.emitOnNavButtonClick('id');
      expect(listener).toHaveBeenCalledWith({data: 'id'});
    });
  });

  describe('update', () => {
    it('sends "update" request', () => {
      return requests.update('id').then(response => {
        expect(response).toEqual({data: 'id', timeout: undefined});
      });
    });
  });
});
